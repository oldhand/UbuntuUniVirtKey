// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb_gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SdsCtlServiceClient is the client API for SdsCtlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SdsCtlServiceClient interface {
	HelloWorld(ctx context.Context, in *HelloWorldRequest, opts ...grpc.CallOption) (*HelloWorldResponse, error)
	Call(ctx context.Context, in *RPCRequest, opts ...grpc.CallOption) (*RPCResponse, error)
	CallWithResult(ctx context.Context, in *RPCRequest, opts ...grpc.CallOption) (*RPCResponse, error)
	CallAndTransferXmlToJson(ctx context.Context, in *RPCRequest, opts ...grpc.CallOption) (*RPCResponse, error)
	CallAndSplitKVToJson(ctx context.Context, in *RPCRequest, opts ...grpc.CallOption) (*RPCResponse, error)
	CallAndGetOutput(ctx context.Context, in *RPCRequest, opts ...grpc.CallOption) (*RPCResponse, error)
}

type sdsCtlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSdsCtlServiceClient(cc grpc.ClientConnInterface) SdsCtlServiceClient {
	return &sdsCtlServiceClient{cc}
}

func (c *sdsCtlServiceClient) HelloWorld(ctx context.Context, in *HelloWorldRequest, opts ...grpc.CallOption) (*HelloWorldResponse, error) {
	out := new(HelloWorldResponse)
	err := c.cc.Invoke(ctx, "/pb.SdsCtlService/HelloWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdsCtlServiceClient) Call(ctx context.Context, in *RPCRequest, opts ...grpc.CallOption) (*RPCResponse, error) {
	out := new(RPCResponse)
	err := c.cc.Invoke(ctx, "/pb.SdsCtlService/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdsCtlServiceClient) CallWithResult(ctx context.Context, in *RPCRequest, opts ...grpc.CallOption) (*RPCResponse, error) {
	out := new(RPCResponse)
	err := c.cc.Invoke(ctx, "/pb.SdsCtlService/CallWithResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdsCtlServiceClient) CallAndTransferXmlToJson(ctx context.Context, in *RPCRequest, opts ...grpc.CallOption) (*RPCResponse, error) {
	out := new(RPCResponse)
	err := c.cc.Invoke(ctx, "/pb.SdsCtlService/CallAndTransferXmlToJson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdsCtlServiceClient) CallAndSplitKVToJson(ctx context.Context, in *RPCRequest, opts ...grpc.CallOption) (*RPCResponse, error) {
	out := new(RPCResponse)
	err := c.cc.Invoke(ctx, "/pb.SdsCtlService/CallAndSplitKVToJson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdsCtlServiceClient) CallAndGetOutput(ctx context.Context, in *RPCRequest, opts ...grpc.CallOption) (*RPCResponse, error) {
	out := new(RPCResponse)
	err := c.cc.Invoke(ctx, "/pb.SdsCtlService/CallAndGetOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SdsCtlServiceServer is the server API for SdsCtlService service.
// All implementations must embed UnimplementedSdsCtlServiceServer
// for forward compatibility
type SdsCtlServiceServer interface {
	HelloWorld(context.Context, *HelloWorldRequest) (*HelloWorldResponse, error)
	Call(context.Context, *RPCRequest) (*RPCResponse, error)
	CallWithResult(context.Context, *RPCRequest) (*RPCResponse, error)
	CallAndTransferXmlToJson(context.Context, *RPCRequest) (*RPCResponse, error)
	CallAndSplitKVToJson(context.Context, *RPCRequest) (*RPCResponse, error)
	CallAndGetOutput(context.Context, *RPCRequest) (*RPCResponse, error)
	mustEmbedUnimplementedSdsCtlServiceServer()
}

// UnimplementedSdsCtlServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSdsCtlServiceServer struct {
}

func (UnimplementedSdsCtlServiceServer) HelloWorld(context.Context, *HelloWorldRequest) (*HelloWorldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloWorld not implemented")
}
func (UnimplementedSdsCtlServiceServer) Call(context.Context, *RPCRequest) (*RPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedSdsCtlServiceServer) CallWithResult(context.Context, *RPCRequest) (*RPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallWithResult not implemented")
}
func (UnimplementedSdsCtlServiceServer) CallAndTransferXmlToJson(context.Context, *RPCRequest) (*RPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallAndTransferXmlToJson not implemented")
}
func (UnimplementedSdsCtlServiceServer) CallAndSplitKVToJson(context.Context, *RPCRequest) (*RPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallAndSplitKVToJson not implemented")
}
func (UnimplementedSdsCtlServiceServer) CallAndGetOutput(context.Context, *RPCRequest) (*RPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallAndGetOutput not implemented")
}
func (UnimplementedSdsCtlServiceServer) mustEmbedUnimplementedSdsCtlServiceServer() {}

// UnsafeSdsCtlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SdsCtlServiceServer will
// result in compilation errors.
type UnsafeSdsCtlServiceServer interface {
	mustEmbedUnimplementedSdsCtlServiceServer()
}

func RegisterSdsCtlServiceServer(s grpc.ServiceRegistrar, srv SdsCtlServiceServer) {
	s.RegisterService(&SdsCtlService_ServiceDesc, srv)
}

func _SdsCtlService_HelloWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloWorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdsCtlServiceServer).HelloWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SdsCtlService/HelloWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdsCtlServiceServer).HelloWorld(ctx, req.(*HelloWorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdsCtlService_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdsCtlServiceServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SdsCtlService/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdsCtlServiceServer).Call(ctx, req.(*RPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdsCtlService_CallWithResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdsCtlServiceServer).CallWithResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SdsCtlService/CallWithResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdsCtlServiceServer).CallWithResult(ctx, req.(*RPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdsCtlService_CallAndTransferXmlToJson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdsCtlServiceServer).CallAndTransferXmlToJson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SdsCtlService/CallAndTransferXmlToJson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdsCtlServiceServer).CallAndTransferXmlToJson(ctx, req.(*RPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdsCtlService_CallAndSplitKVToJson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdsCtlServiceServer).CallAndSplitKVToJson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SdsCtlService/CallAndSplitKVToJson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdsCtlServiceServer).CallAndSplitKVToJson(ctx, req.(*RPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdsCtlService_CallAndGetOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdsCtlServiceServer).CallAndGetOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SdsCtlService/CallAndGetOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdsCtlServiceServer).CallAndGetOutput(ctx, req.(*RPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SdsCtlService_ServiceDesc is the grpc.ServiceDesc for SdsCtlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SdsCtlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SdsCtlService",
	HandlerType: (*SdsCtlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HelloWorld",
			Handler:    _SdsCtlService_HelloWorld_Handler,
		},
		{
			MethodName: "Call",
			Handler:    _SdsCtlService_Call_Handler,
		},
		{
			MethodName: "CallWithResult",
			Handler:    _SdsCtlService_CallWithResult_Handler,
		},
		{
			MethodName: "CallAndTransferXmlToJson",
			Handler:    _SdsCtlService_CallAndTransferXmlToJson_Handler,
		},
		{
			MethodName: "CallAndSplitKVToJson",
			Handler:    _SdsCtlService_CallAndSplitKVToJson_Handler,
		},
		{
			MethodName: "CallAndGetOutput",
			Handler:    _SdsCtlService_CallAndGetOutput_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sdsctl_service.proto",
}
